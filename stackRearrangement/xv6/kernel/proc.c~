#include "types.h"
#include "defs.h"
#include "param.h"
#include "mmu.h"
#include "x86.h"
#include "proc.h"
#include "spinlock.h"
#include "pstat.h"

struct {
  struct spinlock lock;
  struct proc proc[NPROC];
} ptable;

struct Queue 
{
  struct proc* pr[NPROC];
  int hp;
  int tp;
  //struct spinlock lock;
};
struct Queue Q0;
struct Queue Q1;
struct Queue Q2;
struct Queue Q3;


static struct proc *initproc;

int Q0_found = 0; // Ankit
int Q1_found = 0;
int Q2_found = 0;
int Q3_found = 0;

int nextpid = 1;
extern void forkret(void);
extern void trapret(void);

static void wakeup1(void *chan);

void
pinit(void)
{
  initlock(&ptable.lock, "ptable");
}

// Look in the process table for an UNUSED proc.
// If found, change state to EMBRYO and initialize
// state required to run in the kernel.
// Otherwise return 0.
static struct proc*
allocproc(void)
{
  struct proc *p;
  char *sp;

  acquire(&ptable.lock);
  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
    if(p->state == UNUSED)
      goto found;
  release(&ptable.lock);
  return 0;

found:
  p->state = EMBRYO;
  p->priority = 0; // Added this
  p->ticks[0] = 0;
  p->ticks[1] = 0;
  p->ticks[2] = 0;
  p->ticks[3] = 0;
  p->num_times_run = 0;
  //p->state = UNUSED;
  p->pid = nextpid++;
  release(&ptable.lock);

  // Allocate kernel stack if possible.
  if((p->kstack = kalloc()) == 0){
    p->state = UNUSED;
    return 0;
  }
  sp = p->kstack + KSTACKSIZE;
  
  // Leave room for trap frame.
  sp -= sizeof *p->tf;
  p->tf = (struct trapframe*)sp;
  
  // Set up new context to start executing at forkret,
  // which returns to trapret.
  sp -= 4;
  *(uint*)sp = (uint)trapret;

  sp -= sizeof *p->context;
  p->context = (struct context*)sp;
  memset(p->context, 0, sizeof *p->context);
  p->context->eip = (uint)forkret;

  return p;
}

// Set up first user process.
void
userinit(void)
{
  struct proc *p;
  extern char _binary_initcode_start[], _binary_initcode_size[];
  
  p = allocproc();
  acquire(&ptable.lock);
  initproc = p;
  if((p->pgdir = setupkvm()) == 0)
    panic("userinit: out of memory?");
  inituvm(p->pgdir, _binary_initcode_start, (int)_binary_initcode_size);
  p->sz = PGSIZE;
  memset(p->tf, 0, sizeof(*p->tf));
  p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
  p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
  p->tf->es = p->tf->ds;
  p->tf->ss = p->tf->ds;
  p->tf->eflags = FL_IF;
  p->tf->esp = PGSIZE;
  p->tf->eip = 0;  // beginning of initcode.S
	
  safestrcpy(p->name, "initcode", sizeof(p->name));
  p->cwd = namei("/");
 	
  p->state = RUNNABLE;
  release(&ptable.lock);
  
  // Add to Q0
  //Q0.pr[Q0.tp] = p;
  //Q0.tp = (Q0.tp + 1)%NPROC;
  
}

// Grow current process's memory by n bytes.
// Return 0 on success, -1 on failure.
int
growproc(int n)
{
  uint sz;
  
  sz = proc->sz;
  if(n > 0){
    if((sz = allocuvm(proc->pgdir, sz, sz + n)) == 0)
      return -1;
  } else if(n < 0){
    if((sz = deallocuvm(proc->pgdir, sz, sz + n)) == 0)
      return -1;
  }
  proc->sz = sz;
  switchuvm(proc);
  return 0;
}

// Create a new process copying p as the parent.
// Sets up stack to return as if from system call.
// Caller must set state of returned proc to RUNNABLE.
int
fork(void)
{
  int i, pid;
  struct proc *np;

  // Allocate process.
  if((np = allocproc()) == 0)
    return -1;

  // Copy process state from p.
  if((np->pgdir = copyuvm(proc->pgdir, proc->sz)) == 0){
    kfree(np->kstack);
    np->kstack = 0;
    np->state = UNUSED;
    return -1;
  }
  np->sz = proc->sz;
  np->parent = proc;
  *np->tf = *proc->tf;

  // Clear %eax so that fork returns 0 in the child.
  np->tf->eax = 0;

  for(i = 0; i < NOFILE; i++)
    if(proc->ofile[i])
      np->ofile[i] = filedup(proc->ofile[i]);
  np->cwd = idup(proc->cwd);
 
  pid = np->pid;
  np->state = RUNNABLE;
  safestrcpy(np->name, proc->name, sizeof(proc->name));
  //cprintf("inside fork:name  %s pid [%d] state %d\n", np->name,np->pid, np->state);
  
  //Q0.pr[Q0.tp] = proc;
  //Q0.tp = (Q0.tp +1)/ NPROC;
  return pid;
}

// Exit the current process.  Does not return.
// An exited process remains in the zombie state
// until its parent calls wait() to find out it exited.
void
exit(void)
{
  struct proc *p;
  int fd;

  if(proc == initproc)
    panic("init exiting");

  // Close all open files.
  for(fd = 0; fd < NOFILE; fd++){
    if(proc->ofile[fd]){
      fileclose(proc->ofile[fd]);
      proc->ofile[fd] = 0;
    }
  }

  iput(proc->cwd);
  proc->cwd = 0;

  acquire(&ptable.lock);

  // Parent might be sleeping in wait().
  wakeup1(proc->parent);

  // Pass abandoned children to init.
  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
    if(p->parent == proc){
      p->parent = initproc;
      if(p->state == ZOMBIE)
        wakeup1(initproc);
    }
  }

  // Jump into the scheduler, never to return.
  proc->state = ZOMBIE;
  sched();
  panic("zombie exit");
}

// Wait for a child process to exit and return its pid.
// Return -1 if this process has no children.
int
wait(void)
{
  struct proc *p;
  int havekids, pid;

  acquire(&ptable.lock);
  for(;;){
    // Scan through table looking for zombie children.
    havekids = 0;
    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
      if(p->parent != proc)
        continue;
      havekids = 1;
      if(p->state == ZOMBIE){
        // Found one.
        pid = p->pid;
        kfree(p->kstack);
        p->kstack = 0;
        freevm(p->pgdir);
        p->state = UNUSED;
        p->pid = 0;
        p->parent = 0;
        p->name[0] = 0;
        p->killed = 0;
        release(&ptable.lock);
        return pid;
      }
    }

    // No point waiting if we don't have any children.
    if(!havekids || proc->killed){
      release(&ptable.lock);
      return -1;
    }

    // Wait for children to exit.  (See wakeup1 call in proc_exit.)
    sleep(proc, &ptable.lock);  //DOC: wait-sleep
  }
}


//getpinfo

int getpinfo(struct pstat* st)
{

   struct proc *p;
   int i = 0;
    acquire(&ptable.lock);
    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
      if(p->state == UNUSED) {
	st->inuse[i] = 0;
        continue;
      }
    else {
    st->inuse[i] = 1;
    st->pid[i] = p->pid;
    st->priority[i] = p->priority;
    st->ticks[i][0] = p->ticks[0];
    st->ticks[i][1] = p->ticks[1];
    st->ticks[i][2] = p->ticks[2];
    st->ticks[i][3] = p->ticks[3];
    }
    i++;
    }
    release(&ptable.lock);
    return 0;
}

// Per-CPU process scheduler.
// Each CPU calls scheduler() after setting itself up.
// Scheduler never returns.  It loops, doing:
//  - choose a process to run
//  - swtch to start running that process
//  - eventually that process transfers control
//      via swtch back to the scheduler.
void
scheduler(void)
{
  struct proc *p;
  Q0.tp = 0;
  Q1.tp = 0;
  Q2.tp = 0;
  Q3.tp = 0;
  int i;		
  for(;;)
  {

    // Enable interrupts on this processor.
    sti();
    // Loop over process table looking for process to run.
    acquire(&ptable.lock);
    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
    Q0_found=0;
    Q1_found=0;
    Q2_found=0;
    Q3_found=0;

      if(p->state != RUNNABLE)
      {
        continue;
      }
	  else
	  {
          
// PRIORITY 0 CHECK 
         if ((p->state == RUNNABLE) && (p->priority == 0)) 
         {
            int present = 0;
             for(i = 0; i < 64; i++)
            {
               if(Q0.pr[i] != NULL)
               {
               		if (p->pid == (Q0.pr[i])->pid)
               		{
                	  present = 1;
               		}
               }
               
             }  
                
             if(!present)
             {    
                //cprintf("added to queue0\n");
                int tail = Q0.tp;
	  	        //cprintf("ADDING TO QUEUE0: %s pid [%d]\n", p->name,p->pid);
	  		    Q0.pr[tail] = p;
	  		    //cprintf("QO contents: %s pid [%d]\n", Q0.pr->name,Q0.pr->pid);
	  		    Q0.tp  = (Q0.tp + 1) % NPROC;
			  }	  		   
	  	  }// END OF IF
	  	  
// PRIORITY 1 CHECK

         if ((p->state == RUNNABLE) && (p->priority == 1))
         {
         	//cprintf("Comes to Q1\n");
            int present = 0;
            //for(p1 = Q1.pr; p1 < &Q1.pr[NPROC]; p1++)
            for(i = 0; i < 64; i++)
            {
               if(Q1.pr[i] != NULL)
               {
               		if (p->pid == Q1.pr[i]->pid)
               		{
               			present = 1;
              			 //break;
 	                }
               }
            }  
                
             if(!present)
             {    
                int tail = Q1.tp;
	  	        //cprintf("ADDING TO QUEUE1: %s pid [%d]\n", p->name,p->pid);
	  		    Q1.pr[tail] = p;
	  		    Q1.tp  = (Q1.tp + 1) % NPROC;
			  }	  		   
	  	  }// END OF IF
	  	  
	  	  
	  	 // check if priority 2 and push to Q2 if thats the case
         if ((p->state == RUNNABLE) && (p->priority == 2))
         {
            //cprintf("Comes to Q2\n");
            int present = 0;
            for(i = 0; i < 64; i++)
            {
              if(Q2.pr[i] != NULL)
               {
                	if (p->pid == Q2.pr[i]->pid)
               	    {
              	      present = 1;
               }
               }
            }  
                
             if(!present)
             {    
                int tail = Q2.tp;
	  	       // cprintf("ADDING TO QUEUE2: %s pid [%d]\n", p->name,p->pid);
	  		    Q2.pr[tail] = p;
	  		    Q2.tp  = (Q2.tp + 1) % NPROC;
			  }	  		   
	  	  }// END OF IF
	  	  
	  	  
	  	 // check if priority 3 and push to Q3 if thats the case
         if ((p->state == RUNNABLE) && (p->priority == 3))
         {
            int present = 0;
            for(i = 0; i < 64; i++)
            {
               if(Q3.pr[i] != NULL)
               {
               if (p->pid == Q3.pr[i]->pid)
               {
               present = 1;
               }
               }
            }  
                
             if(!present)
             {    
                int tail = Q3.tp;
	  	        //cprintf("ADDING TO QUEUE3: %s pid [%d]\n", p->name,p->pid);
	  		    Q3.pr[tail] = p;
	  		    Q3.tp  = (Q3.tp + 1) % NPROC;
			  }	  		   
	  	  }// END OF IF*/  	  
	  	  
	  	}// END OF ELSE  
	  }// END OF FOR 		 
        
	  // loop through Q0 queue to check for runnable program
	  for(i = 0; i < 64; i++) 
      //for(p = Q0.pr; p < &Q0.pr[NPROC]; p++)
      {
         if (Q0.pr[i] != NULL)
          {
        	if((Q0.pr[i]->state == RUNNABLE) && (Q0.pr[i]->priority == 0))
    		{
		  	Q0_found = 1;
		  	proc = Q0.pr[i];
      		switchuvm(Q0.pr[i]);
      		Q0.pr[i]->state = RUNNING;
		Q0.pr[i]->num_times_run++;
      		//cprintf("RUNNING Q0 proc->name %s proc->priority %d proc->state %d\n", proc->name, proc->priority, proc->state);
      		swtch(&cpu->scheduler, proc->context);
      		switchkvm();
      		proc = 0;
		  	break;
		    }
	      }
      }  
	 
	  // loop through Q1 queue to check for runnable program 
	  if (!Q0_found)  
	   {
	     for(i = 0; i < 64; i++)
    	  {
    	    if (Q1.pr[i] != NULL)
    	    {
    	    	if((Q1.pr[i]->state == RUNNABLE) && (Q1.pr[i]->priority == 1))
    	    	{
		  	      Q1_found = 1;
		  	      proc = Q1.pr[i];
      			  switchuvm(Q1.pr[i]);
      			  Q1.pr[i]->state = RUNNING;
			  Q1.pr[i]->num_times_run++;
      			  //cprintf("RUNNING Q1 proc->name %s proc->priority %d proc->state %d\n", proc->name, proc->priority, proc->state);
      			  swtch(&cpu->scheduler, proc->context);
      			  switchkvm();
      			  proc = 0;
		  	 	  break;
		        }
		      }
		    }
    	 }
	  // loop through Q2 queue to check for runnable program 
	  if (!Q1_found)  
	   {
	     for(i = 0; i < 64; i++)
    	  {
    	    if (Q2.pr[i] != NULL)
    	    {
    	    	if((Q2.pr[i]->state == RUNNABLE) && (Q2.pr[i]->priority == 2))
    	    	{
		  	      Q2_found = 1;
		  	      proc = Q2.pr[i];
      			  switchuvm(Q2.pr[i]);
      			  Q2.pr[i]->state = RUNNING;
			  Q2.pr[i]->num_times_run++;
      			  //cprintf("RUNNING Q2 proc->name %s proc->priority %d proc->state %d\n", proc->name, proc->priority, proc->state);
      			  swtch(&cpu->scheduler, proc->context);
      			  switchkvm();
      			  proc = 0;
		  	 	  break;
		        }
		      }
		    }
    	 }	
    	 

      // loop through Q3 queue to check for runnable program 
	  if (!Q2_found)  
	   {
	     for(i = 0; i < 64; i++)
    	  {
    	    if (Q3.pr[i] != NULL)
    	    {
    	    	if((Q3.pr[i]->state == RUNNABLE) && (Q3.pr[i]->priority == 3))
    	    	{
		  	      Q3_found = 1;
		  	      proc = Q3.pr[i];
      			  switchuvm(Q3.pr[i]);
      			  Q3.pr[i]->state = RUNNING;
			  Q3.pr[i]->num_times_run++;
      			  //cprintf("RUNNING Q3 proc->name %s proc->priority %d proc->state %d\n", proc->name, proc->priority, proc->state);
      			  swtch(&cpu->scheduler, proc->context);
      			  switchkvm();
       			  proc = 0;
		  	 	  break;
		        }
		      }
		    }
    	 }

    release(&ptable.lock);
  }
}
	  

// Enter scheduler.  Must hold only ptable.lock
// and have changed proc->state.
void
sched(void)
{
  int intena;

  if(!holding(&ptable.lock))
    panic("sched ptable.lock");
  if(cpu->ncli != 1)
    panic("sched locks");
  if(proc->state == RUNNING)
    panic("sched running");
  if(readeflags()&FL_IF)
    panic("sched interruptible");
  intena = cpu->intena;
  swtch(&proc->context, cpu->scheduler);
  cpu->intena = intena;
}

// Give up the CPU for one scheduling round.
void
yield(void)
{
  int i;
  int flag = 0;
  struct proc* save_p;
  acquire(&ptable.lock);  //DOC: yieldlock
  proc->state = RUNNABLE;
  //cprintf("yield: before priority change: proc name %s priority %d state %d\n", proc->name, proc->priority, proc->state);
  if(proc->priority == 0) 
    {
//		cprintf("proc name %s priority==0\n", proc->name);
		proc->ticks[0]++;
		if(proc->ticks[0] == 1) 
		{
			proc->priority = 1;
			flag = 1;
		}
   }
   if(!flag) {
   if(proc->priority == 1)
    {
//		cprintf("proc name %s priority==1\n", proc->name);
		proc->ticks[1]++;
		if (proc->ticks[1] == 2)
		{
		    proc->priority = 2;
		    flag = 1;
		}
   }
   }

   if(!flag) {
   if(proc->priority == 2)
   {
//		cprintf("proc name %s priority==2\n", proc->name);
		proc->ticks[2]++;
		if (proc->ticks[2] == 4) 
		{
		    proc->priority = 3;
		    flag = 1;
		 
		}
   }
  }
 
   if(!flag) {
   if(proc->priority == 3)
   {
//		cprintf("proc name %s priority==3\n", proc->name);
		proc->ticks[3]++;
		if (proc->ticks[3]%8 == 0) 
		{
 		     // look for this element in Q3 and delete it, and push it at the end
                     for(i = 0; i < 64; i++) {
 		     	if(Q3.pr[i]->pid == proc->pid){
				save_p = proc;
				Q3.pr[i]== NULL;
				// shifting the queue
				for (i=i+1;i<Q3.tp;i++)
				{
					Q3.pr[i-1] = Q3.pr[i]; 
				}
				Q3.pr[i]= NULL;
				Q3.tp =	Q3.tp -1;
				break;
			}
		    }
		    Q3.pr[Q3.tp]=save_p;
   		}
   }
  }

 // cprintf("yield: after priority change: proc name %s priority %d state %d\n", proc->name, proc->priority, proc->state);
  //cprintf("proc->name %s proc->priority %d proc->state %d\n", proc->name, proc->priority, proc->state);
  sched();
  release(&ptable.lock);
}

// A fork child's very first scheduling by scheduler()
// will swtch here.  "Return" to user space.
void
forkret(void)
{
  // Still holding ptable.lock from scheduler.
  release(&ptable.lock);
  
  // Return to "caller", actually trapret (see allocproc).
}

// Atomically release lock and sleep on chan.
// Reacquires lock when awakened.
void
sleep(void *chan, struct spinlock *lk)
{
  if(proc == 0)
    panic("sleep");

  if(lk == 0)
    panic("sleep without lk");

  // Must acquire ptable.lock in order to
  // change p->state and then call sched.
  // Once we hold ptable.lock, we can be
  // guaranteed that we won't miss any wakeup
  // (wakeup runs with ptable.lock locked),
  // so it's okay to release lk.
  if(lk != &ptable.lock){  //DOC: sleeplock0
    acquire(&ptable.lock);  //DOC: sleeplock1
    release(lk);
  }

  // Go to sleep.
  proc->chan = chan;
  proc->state = SLEEPING;
  //cprintf("Sleeping: state: %d\n", proc->state);
  sched();

  // Tidy up.
  proc->chan = 0;

  // Reacquire original lock.
  if(lk != &ptable.lock){  //DOC: sleeplock2
    release(&ptable.lock);
    acquire(lk);
  }
}

// Wake up all processes sleeping on chan.
// The ptable lock must be held.
static void
wakeup1(void *chan)
{
  struct proc *p;
  //int head;
  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
  {
    if(p->state == SLEEPING && p->chan == chan)
    {
      p->state = RUNNABLE;
    }
   }
      
}

// Wake up all processes sleeping on chan.
void
wakeup(void *chan)
{
  acquire(&ptable.lock);
  wakeup1(chan);
  release(&ptable.lock);
}

// Kill the process with the given pid.
// Process won't exit until it returns
// to user space (see trap in trap.c).
int
kill(int pid)
{
  struct proc *p;

  acquire(&ptable.lock);
  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
    if(p->pid == pid){
      p->killed = 1;
      // Wake process from sleep if necessary.
      if(p->state == SLEEPING)
        p->state = RUNNABLE;
      release(&ptable.lock);
      return 0;
    }
  }
  release(&ptable.lock);
  return -1;
}

// Print a process listing to console.  For debugging.
// Runs when user types ^P on console.
// No lock to avoid wedging a stuck machine further.
void
procdump(void)
{
  static char *states[] = {
  [UNUSED]    "unused",
  [EMBRYO]    "embryo",
  [SLEEPING]  "sleep ",
  [RUNNABLE]  "runble",
  [RUNNING]   "run   ",
  [ZOMBIE]    "zombie"
  };
  int i;
  struct proc *p;
  char *state;
  uint pc[10];
  
  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
    if(p->state == UNUSED)
      continue;
    if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
      state = states[p->state];
    else
      state = "???";
    cprintf("%d %s %s", p->pid, state, p->name);
    if(p->state == SLEEPING){
      getcallerpcs((uint*)p->context->ebp+2, pc);
      for(i=0; i<10 && pc[i] != 0; i++)
        cprintf(" %p", pc[i]);
    }
    cprintf("\n");
  }
}


